




















#########################################################################################################
# Comparison Operators

<       Strictly less than
<=      Less than or equal
>       Strictly Greater than
>=      Greater than or equal
==      equal
!=      Not equal

#########################################################################################################
# Boolean Operators
 
or 
not

The and Operator

True and True = True
False and True = False
True and False = False
False and False = False

example: 
    x = 12 
    x > 5 and x < 15
    # True    # True

The or Operator

True or True = True
False or True = True
True or False = True
False or False = False

example: 
    y = 5
    y < 7 or y > 13


The not Operator

not True = False
not False = True

NumPy uses: 
    logical_and()
    logical_or()
    logical_not()

example:
    np.logical_and(bmi > 21, bmi < 22) # to get just the boolean answers
    bmi[np.logical_and(bmi > 21, bmi < 22)] # to get the actual bmi answers

################################################################################################
if, elif, and else: 

if statement

if condition :
    expression

    example: 
        z = 4
        if z % 2 == 0 :           # % 2 will return 0 if z is even 
            print("z is even")

If / else statement

if condition : 
    expression
    else :
    expression

    example:
        z = 5 
        if z% 2 == 0 :
            print("z is even)
        else :
            print("z is odd)

The elif statement

if condition:
    expression
elif condition:
    expression
elif condition:
    expression

    example:
        z = 3 
        if z % 2 == 0 :
            print("z is divisible by 2")
        elif z % 3 == 0 :
            print("z is divisible by 3")
        else :
            Print("z is neither divisible by 2 nor by 3")

####################################################################################################
Filtering Pandas DataFrames:

Example: 
        import pandas as pd
        brics = pd.read_csb("path/to/prics.csv, index_col = 0)

    # You want to keep the countries that have an area of greater than 8 million km
    # You want a pandas series not a pandas dataframe
    
    # Step 1: Get the column
        brics["area"]
    
    # Step 2: Compare
    # Gives you a series containing booleans stored in variable is_huge
        is_huge = brics["area"] > 8

    # Step 3: Subset the DataFrame
        brics[is_huge]

Using boolean Operators

Example:
    # Only want to display countries with greater than 8 but less than 10 million km
        import numpy as np

    # Step 1: build the code for the series
        np.logical_and(brics["area"] > 8, brics["area"] < 10)

    # Step 2: Wrap in brics brackets []
         brics[np.logical_and(brics["area"] > 8, brics["area"] < 10)]

#########################################################################################################
While Loop:

    while condition :
        expression

    example:
        error = 50.0

        while error > 1:
            error = error / 4
            print(error)
    
###########################################################################################################
For loop:

    # For each variable in the sequence, execute the expression
    for var in seq :
        expression

    example:
        fam = [1.73, 1.68, 1.71, 1.89]
        for height in fam :
            print(height)

    example: printing the index number for each
        fam = [1.73, 1.68, 1.71, 1.89]
        for index, height in enumerate(fam) :
            print("index " + str(index) + ": " + str(height))

    example: interating a string and captilizing the prints
        for c in "family" :
            print(c.capitalize())

#############################################################################################################
Loop Data Structures part 1: 

Dictionaries: 

    example:
        for key, value in world.items() :
            print(key + " -- " + str(value))


NumPy Arrays:

    example: 1D array
        np_height = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        np_weight = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        bmi = np_weight / np_height ** 2

        for val in bmi :
            print (val)

    example: 2D array
        np_height = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        np_weight = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        meas = np.array([np_height, np_weight])

        for val in np.nditer(meas) :
            print(val)

#################################################################################################################
Loop Data Structures part 2:

Pandas Data Structures

    example: Prints Labels then rows
    import pandas as pd
    brics = pd.read_csv("brics.csv", index_col = 0)

    for lab, row in brics.iterrows(): 
        print(lab)
        print(row)

    example: Selective print
    for lab, row in brics.iterrows(): 
        print(lab + ": " + row["capital"])

    example: Add column with for loop
    for lab, row in brics.iterrows() :
        #Creating series on every iteration
        brics.loc[lab, "name_length"] = len(row["country"])

    example: Add column without for loop
    brics["name_length"] = brics["country"].apply(len)
    print(brics)

##################################################################################################################
Random Numbers: 

example: 
    import numpy as np
    np.random.rand()    # Pseudo-random number generator

example: coin toss
    np.random.seed(123)    # seed can be anything
    coin = np.random.randint(0, 2)  # randomly generate 0 or 1

    if coin == 0 :
        print("heads")
    else : 
        print("tails")

##################################################################################################################
Random Walk:

# Keeps track of the history of specific random events

example: Heads or tails (not a random walk)
    import numpy as np 
    np.random.seed(123)
    outcomes = []
    for x in range(10) :          # this will keep track of 10 events
        coin = np.random.randint(0,2) 
        if coin == 0 :
            outcomes.append("heads")
        else : 
            outcomes.append("tails")
    print(outcomes)

example: Heads or tails (Random Walk)
    import numpy as np
    np.random.seed(123)
    tails = [0]
    for x in range(10) :
        coin = np.random.randint(0,2)
        tails.append(tails[x] + coin)
    print(tails)

#####################################################################################################################
Distribution:

example: Heads or tails (Random Walk)
    import numpy as np
    np.random.seed(123)
    tails = [0]
    for x in range(10) :
        coin = np.random.randint(0,2)
        tails.append(tails[x] + coin)
    print(tails)

example: Distribution of 100 flips
    import numpy as np
    import matplotlib.pyplot as plt
    np.random.seed(123)
    final_tails = []
    for x in range(100)
        tails = [0]
        for x in range(10) :
            coin = np.random.randint(0,2)
            tails.append(tails[x] + coin)
        final_tails.append(tails[-1])
    plt.hist(final_tails, bins = 10)
    plt.show()