




















#########################################################################################################
# Comparison Operators

<       Strictly less than
<=      Less than or equal
>       Strictly Greater than
>=      Greater than or equal
==      equal
!=      Not equal

#########################################################################################################
# Boolean Operators
 
or 
not

The and Operator

True and True = True
False and True = False
True and False = False
False and False = False

example: 
    x = 12 
    x > 5 and x < 15
    # True    # True

The or Operator

True or True = True
False or True = True
True or False = True
False or False = False

example: 
    y = 5
    y < 7 or y > 13


The not Operator

not True = False
not False = True

NumPy uses: 
    logical_and()
    logical_or()
    logical_not()

example:
    np.logical_and(bmi > 21, bmi < 22) # to get just the boolean answers
    bmi[np.logical_and(bmi > 21, bmi < 22)] # to get the actual bmi answers

################################################################################################
if, elif, and else: 

if statement

if condition :
    expression

    example: 
        z = 4
        if z % 2 == 0 :           # % 2 will return 0 if z is even 
            print("z is even")

If / else statement

if condition : 
    expression
    else :
    expression

    example:
        z = 5 
        if z% 2 == 0 :
            print("z is even)
        else :
            print("z is odd)

The elif statement

if condition:
    expression
elif condition:
    expression
elif condition:
    expression

    example:
        z = 3 
        if z % 2 == 0 :
            print("z is divisible by 2")
        elif z % 3 == 0 :
            print("z is divisible by 3")
        else :
            Print("z is neither divisible by 2 nor by 3")

####################################################################################################
Filtering Pandas DataFrames:

Example: 
        import pandas as pd
        brics = pd.read_csb("path/to/prics.csv, index_col = 0)

    # You want to keep the countries that have an area of greater than 8 million km
    # You want a pandas series not a pandas dataframe
    
    # Step 1: Get the column
        brics["area"]
    
    # Step 2: Compare
    # Gives you a series containing booleans stored in variable is_huge
        is_huge = brics["area"] > 8

    # Step 3: Subset the DataFrame
        brics[is_huge]

Using boolean Operators

Example:
    # Only want to display countries with greater than 8 but less than 10 million km
        import numpy as np

    # Step 1: build the code for the series
        np.logical_and(brics["area"] > 8, brics["area"] < 10)

    # Step 2: Wrap in brics brackets []
         brics[np.logical_and(brics["area"] > 8, brics["area"] < 10)]

#########################################################################################################
While Loop:

    while condition :
        expression

    example:
        error = 50.0

        while error > 1:
            error = error / 4
            print(error)
    
###########################################################################################################
For loop:

    # For each variable in the sequence, execute the expression
    for var in seq :
        expression

    example:
        fam = [1.73, 1.68, 1.71, 1.89]
        for height in fam :
            print(height)

    example: printing the index number for each
        fam = [1.73, 1.68, 1.71, 1.89]
        for index, height in enumerate(fam) :
            print("index " + str(index) + ": " + str(height))

    example: interating a string and captilizing the prints
        for c in "family" :
            print(c.capitalize())

#############################################################################################################
Loop Data Structures part 1: 

Dictionaries: 

    example:
        for key, value in world.items() :
            print(key + " -- " + str(value))


NumPy Arrays:

    example: 1D array
        np_height = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        np_weight = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        bmi = np_weight / np_height ** 2

        for val in bmi :
            print (val)

    example: 2D array
        np_height = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        np_weight = np.array([1.73, 1.68.1.71, 1.89, 1.79])
        meas = np.array([np_height, np_weight])

        for val in np.nditer(meas) :
            print(val)

#################################################################################################################
Loop Data Structures part 2:

Pandas Data Structures

    example: Prints Labels then rows
    import pandas as pd
    brics = pd.read_csv("brics.csv", index_col = 0)

    for lab, row in brics.iterrows(): 
        print(lab)
        print(row)

    example: Selective print
    for lab, row in brics.iterrows(): 
        print(lab + ": " + row["capital"])

    example: Add column with for loop
    for lab, row in brics.iterrows() :
        #Creating series on every iteration
        brics.loc[lab, "name_length"] = len(row["country"])

    example: Add column without for loop
    brics["name_length"] = brics["country"].apply(len)
    print(brics)

##################################################################################################################
Random Numbers: 

example: 
    import numpy as np
    np.random.rand()    # Pseudo-random number generator

example: coin toss
    np.random.seed(123)    # seed can be anything
    coin = np.random.randint(0, 2)  # randomly generate 0 or 1

    if coin == 0 :
        print("heads")
    else : 
        print("tails")

##################################################################################################################
Random Walk:

# Keeps track of the history of specific random events

example: Heads or tails (not a random walk)
    import numpy as np 
    np.random.seed(123)
    outcomes = []
    for x in range(10) :          # this will keep track of 10 events
        coin = np.random.randint(0,2) 
        if coin == 0 :
            outcomes.append("heads")
        else : 
            outcomes.append("tails")
    print(outcomes)

example: Heads or tails (Random Walk)
    import numpy as np
    np.random.seed(123)
    tails = [0]
    for x in range(10) :
        coin = np.random.randint(0,2)
        tails.append(tails[x] + coin)
    print(tails)

#####################################################################################################################
Distribution:

example: Heads or tails (Random Walk)
    import numpy as np
    np.random.seed(123)
    tails = [0]
    for x in range(10) :
        coin = np.random.randint(0,2)
        tails.append(tails[x] + coin)
    print(tails)

example: Distribution of 100 flips
    import numpy as np
    import matplotlib.pyplot as plt
    np.random.seed(123)
    final_tails = []
    for x in range(100)
        tails = [0]
        for x in range(10) :
            coin = np.random.randint(0,2)
            tails.append(tails[x] + coin)
        final_tails.append(tails[-1])
    plt.hist(final_tails, bins = 10)
    plt.show()

########################################################################################################################################
User-Defined functions:

Parameters
    # No Arguments
    def fun1():
        expression

    # One Argument
    def fun2(arg1):
        expression

    # Multiple Arguments
    def fun3 (arg1, arg2)
        expression

    Examples: 
    # Define the function shout
    def shout():
        """Print a string with three exclamation marks"""
        # Concatenate the strings: shout_word
        shout_word = 'congratulations' + '!!!'

        # Print shout_word
        print(shout_word)

    # Call shout
    shout()

    ----------------------------------------------------------------------------------
    # Define shout with the parameter, word
    def shout(word):
        """Print a string with three exclamation marks"""
        # Concatenate the strings: shout_word
        shout_word = word + '!!!'

        # Print shout_word
        print(shout_word)

    # Call shout with the string 'congratulations'
    shout('congratulations')

    ----------------------------------------------------------------------------------
    # Define shout with the parameter, word
    def shout(word):
        """Return a string with three exclamation marks"""
        # Concatenate the strings: shout_word
        shout_word = word + '!!!'

        # Replace print with return
        return(shout_word)

    # Pass 'congratulations' to shout: yell
    yell = shout('congratulations')

    # Print yell
    print(yell)

#####################################################################################################################################
Multiple Parameters and Return Values:

    Examples: Multiple parameters
    # Define shout with parameters word1 and word2
    def shout(word1, word2):
        """Concatenate strings with three exclamation marks"""
        # Concatenate word1 with '!!!': shout1
        shout1 = word1 + '!!!'
        
        # Concatenate word2 with '!!!': shout2
        shout2 = word2 + '!!!'
        
        # Concatenate shout1 with shout2: new_shout
        new_shout = shout1 + shout2

        # Return new_shout
        return new_shout

    # Pass 'congratulations' and 'you' to shout(): yell
    yell = shout('congratulations', 'you')

    # Print yell
    print(yell)

    -------------------------------------------------------------------------------
    Example: Tuples
    # Unpack nums into num1, num2, and num3
    num1 = nums[0]
    num2 = nums[1]
    num3 = nums[2]

    # Construct even_nums
    even_nums = (2, num2, num3)

    ---------------------------------------------------------------------------------
    Example: Returning multiple values
    # Define shout_all with parameters word1 and word2
    def shout_all(word1, word2):
        
        # Concatenate word1 with '!!!': shout1
        shout1 = word1 + '!!!'
        
        # Concatenate word2 with '!!!': shout2
        shout2 = word2 + '!!!'
        
        # Construct a tuple with shout1 and shout2: shout_words
        shout_words = (shout1, shout2)

        # Return shout_words
        return shout_words

    # Pass 'congratulations' and 'you' to shout_all(): yell1, yell2
    yell1, yell2 = shout_all('congratulations', 'you')

    # Print yell1 and yell2
    print(yell1)
    print(yell2)

#######################################################################################################################################
Bringing it all together:

    Examples:
    Bringing it all together (1)
    You've got your first taste of writing your own functions in the previous exercises. You've learned how to add parameters to your own function definitions, return a value or multiple values with tuples, and how to call the functions you've defined.

    In this and the following exercise, you will bring together all these concepts and apply them to a simple data science problem. You will load a dataset and develop functionalities to extract simple insights from the data.

    For this exercise, your goal is to recall how to load a dataset into a DataFrame. The dataset contains Twitter data and you will iterate over entries in a column to build a dictionary in which the keys are the names of languages and the values are the number of tweets in the given language. The file tweets.csv is available in your current directory.

    Be aware that this is real data from Twitter and as such there is always a risk that it may contain profanity or other offensive content (in this exercise, and any following exercises that also use real Twitter data).

    Instructions
    
    Import the pandas package with the alias pd.
    Import the file 'tweets.csv' using the pandas function read_csv(). Assign the resulting DataFrame to df.
    Complete the for loop by iterating over col, the 'lang' column in the DataFrame df.
    Complete the bodies of the if-else statements in the for loop: if the key is in the dictionary langs_count, add 1 to the value corresponding to this key in the dictionary, else add the key to langs_count and set the corresponding value to 1. Use the loop variable entry in your code.

    # Import pandas
    import pandas as pd

    # Import Twitter data as DataFrame: df
    df = pd.read_csv('tweets.csv')

    # Initialize an empty dictionary: langs_count
    langs_count = {}

    # Extract column from DataFrame: col
    col = df['lang']

    # Iterate over lang column in DataFrame
    for entry in col:

        # If the language is in langs_count, add 1 
        if entry in langs_count.keys():
            langs_count[entry] += 1
        # Else add the language to langs_count, set the value to 1
        else:
            langs_count[entry] = 1

    # Print the populated dictionary
    print(langs_count)

    Bringing it all together (2)
    Great job! You've now defined the functionality for iterating over entries in a column and building a dictionary with keys the names of languages and values the number of tweets in the given language.

    In this exercise, you will define a function with the functionality you developed in the previous exercise, return the resulting dictionary from within the function, and call the function with the appropriate arguments.

    For your convenience, the pandas package has been imported as pd and the 'tweets.csv' file has been imported into the tweets_df variable.

    Instructions
    
    Define the function count_entries(), which has two parameters. The first parameter is df for the DataFrame and the second is col_name for the column name.
    Complete the bodies of the if-else statements in the for loop: if the key is in the dictionary langs_count, add 1 to its current value, else add the key to langs_count and set its value to 1. Use the loop variable entry in your code.
    Return the langs_count dictionary from inside the count_entries() function.
    Call the count_entries() function by passing to it tweets_df and the name of the column, 'lang'. Assign the result of the call to the variable result.

    # Define count_entries()
    def count_entries(df, col_name):
        """Return a dictionary with counts of 
        occurrences as value for each key."""

        # Initialize an empty dictionary: langs_count
        langs_count = {}
        
        # Extract column from DataFrame: col
        col = df[col_name]
        
        # Iterate over lang column in DataFrame
        for entry in col:

            # If the language is in langs_count, add 1
            if entry in langs_count.keys():
                langs_count[entry] += 1
            # Else add the language to langs_count, set the value to 1
            else:
                langs_count[entry] = 1

        # Return the langs_count dictionary
        return langs_count

    # Call count_entries(): result
    result = count_entries(tweets_df, 'lang')

    # Print the result
    print(result)


